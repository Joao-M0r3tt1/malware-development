function `socket(argument_1, argument_2, argument_3);`          
          socket(use IP version 4 - (IPv4), socket type - TCP protocol, protocol)

function `htons(port);` - used to convert the port number to the data type required by the structure

function `inet_addr("IP");` - address of the kali linux machine, that is, the server. Note: `ifconfig` to get the IP

function `bind(argument_1, argument_2, argument_3);`
          bind(server socket created, pointer to structure - 'server address', structure size)

function `listen(argument_1, argument_2);`
          listen(server socket created, number of connections that will be listened to)

function `accept(argument_1, argument_2, argument_3);`
          accept(server socket created, null parameter in this case, null parameter in this case)

function `send(argument_1, argument_2, argument_3, argument_4);`
          send(client socket created, buffer message, sent buffer size, 0)

function `recv(argument_1, argument_2, argument_3, argument_4);`
          recv(client socket created, data storage buffer, storage buffer size, 0)


########################################################################################################################
--- Testing the server code

    - compile the source code
        gcc -o server_socket server_socket.c

    - open a new tab in the terminal - will be the 'client'

    - run the new file
        ./socket_server

    - in the new tab (client) establish the connection with the server
        nc IP and port -> nc 0.0.0.0 9001

    - observe in both terminals
        - server terminal message: 'Client connected!'
        - client terminal message: 'Hello from the server!'

    - client can send a message
        - client terminal, type: Test
        - server will display: 'Client has sent: Test'
        - connection is automatically closed when sending the message
        
        - or if the client has not sent a message, the connection is closed by typing `Ctrl+c`